---
title: "Assemble environment and DOC data."
author: "Thelma Panaïotis"
format:
  html:
    toc: true
    embed-resources: true
editor: visual
execute:
  cache: true
  warning: false
---

```{r set_up}
#| cache: false
source("utils.R")
```

We will create 5 datasets, one for each prediction task:

-   surface annual

-   surface seasonal

-   epipelagic annual

-   mesopelagic annual

-   bathypelagic annual

## Load data

```{r load}
load("data/00.all_env.Rdata")
load("data/01.doc_data.Rdata")

# Clean names data: replace . by _
df_env <- df_env %>% rename_all(~ sub("\\.", "_", .x))
df_doc <- df_doc %>% rename_all(~ sub("\\.", "_", .x))
```

## Join

### Surface annual

```{r surf_ann}
## New predictions data
# Env data in the surface layer, annual, to be used for new predictions. NB: this requires droping any row with missing values
df_ann_surf_pred <- df_env %>% 
  filter(season == 0) %>% 
  select(-contains(c("epi", "meso", "bathy"))) %>% 
  drop_na()

## Model fitting data
# Join env data with doc data, drop missing observations, apply log transformation to doc value
df_ann_surf_fit <- df_doc %>% 
  filter(season == 0) %>% 
  select(-contains(c("epi", "meso", "bathy"))) %>% 
  left_join(df_ann_surf_pred, by = join_by(lon, lat, season)) %>% 
  drop_na() %>% 
  mutate(log_doc_surf = log(doc_surf), .before = doc_surf)
```

Plot map of coverage.

```{r surf_ann_cov}
# Plot coverage of data
# points are model fitting data
# blue rectangles are the prediction area
ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(data = df_ann_surf_pred, aes(x = lon, y = lat), fill = "steelblue3", alpha = 0.5) +
  geom_point(data = df_ann_surf_fit, aes(x = lon, y = lat, colour = log_doc_surf), size = 0.5) +
  ggplot2::scale_colour_viridis_c(option = "A") +
  coord_quickmap(expand = 0) +
  ggtitle("Surface annual")
```

Plot doc distributions, after log-transformation

```{r ann_surf_doc}
ggplot(df_ann_surf_fit) + geom_histogram(aes(x = log_doc_surf)) + ggtitle("Surface annual")
```

Even with log-transformation, we still have a long-tail distribution. Let’s check where are these high values.

```{r ann_surf_map_high}
ggplot(df_ann_surf_fit) +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_point(aes(x = lon, y = lat, colour = log_doc_surf > 5), size = 0.5) +
  coord_quickmap(expand = 0) +
  ggtitle("Surface annual")
```

### Surface seasonal

```{r surf_seas}
## New predictions data
# Env data in the surface layer, annual, to be used for new predictions. NB: this requires droping any row with missing values
df_seas_surf_pred <- df_env %>% 
  filter(season != 0) %>% 
  select(-contains(c("epi", "meso", "bathy"))) %>% 
  drop_na()

## Model fitting data
# Join env data with doc data, drop missing observations, apply log transformation to doc value
df_seas_surf_fit <- df_doc %>% 
  filter(season != 0) %>% 
  select(-contains(c("epi", "meso", "bathy"))) %>% 
  left_join(df_seas_surf_pred, by = join_by(lon, lat, season)) %>% 
  drop_na() %>% 
  mutate(log_doc_surf = log(doc_surf), .before = doc_surf)
```

Plot map of coverage.

```{r surf_seas_cov}
# Plot coverage of data
# points are model fitting data
# blue rectangles are the prediction area
ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(data = df_seas_surf_pred, aes(x = lon, y = lat), fill = "steelblue3", alpha = 0.5) +
  geom_point(data = df_seas_surf_fit, aes(x = lon, y = lat, colour = log_doc_surf), size = 0.5) +
  ggplot2::scale_colour_viridis_c(option = "A") +
  coord_quickmap(expand = 0) +
  facet_wrap(~season) +
  ggtitle("Surface seasonal")
```

A few very high values in autumn.

Plot doc distributions, after log-transformation

```{r seas_surf_doc}
ggplot(df_seas_surf_fit) + geom_histogram(aes(x = log_doc_surf)) + facet_wrap(~season) + ggtitle("Surface seasonal")
```

Even with log-transformation, we still have a long-tail distribution, especially in autumn. Let’s check where are these high values.

```{r seas_surf_map_high}
ggplot(df_seas_surf_fit) +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_point(aes(x = lon, y = lat, colour = log_doc_surf > 5), size = 0.5) +
  coord_quickmap(expand = 0) + 
  facet_wrap(~season) +
  ggtitle("Surface seasonal")
```

### Epipelagic annual

```{r epi_ann}
## New predictions data
# Env data in the surface + epipelagic layer, annual, to be used for new predictions. NB: this requires droping any row with missing values
df_ann_epi_pred <- df_env %>% filter(season == 0) %>% select(-contains(c("meso", "bathy"))) %>% drop_na()

## Model fitting data
# Join env data with doc data, drop missing observations, apply log transformation to doc value
df_ann_epi_fit <- df_doc %>% 
  filter(season == 0) %>% 
  select(-contains(c("surf", "meso", "bathy"))) %>% 
  left_join(df_ann_epi_pred, by = join_by(lon, lat, season)) %>% 
  drop_na() %>% 
  mutate(log_doc_epi = log(doc_epi), .before = doc_epi)
```

Plot map of coverage.

```{r epi_ann_cov}
# Plot coverage of data
# points are model fitting data
# blue rectangles are the prediction area
ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(data = df_ann_epi_pred, aes(x = lon, y = lat), fill = "steelblue3", alpha = 0.5) +
  geom_point(data = df_ann_epi_fit, aes(x = lon, y = lat, colour = log_doc_epi), size = 0.5) +
  ggplot2::scale_colour_viridis_c(option = "A") +
  coord_quickmap(expand = 0) +
  ggtitle("Epi annual")
```

Plot doc distributions, after log-transformation

```{r ann_epi_doc}
ggplot(df_ann_epi_fit) + geom_histogram(aes(x = log_doc_epi)) + ggtitle("Epi annual")
```

OK-ish distribution.

### Mesopelagic annual

```{r meso_ann}
## New predictions data
# Env data in the surface + epipelagic + mesopelagic layer, annual, to be used for new predictions. NB: this requires droping any row with missing values
df_ann_meso_pred <- df_env %>% filter(season == 0) %>% select(-contains("bathy")) %>% drop_na()

## Model fitting data
# Join env data with doc data, drop missing observations, apply log transformation to doc value
df_ann_meso_fit <- df_doc %>% 
  filter(season == 0) %>% 
  select(-contains(c("surf", "epi", "bathy"))) %>% 
  left_join(df_ann_meso_pred, by = join_by(lon, lat, season)) %>% 
  drop_na() %>% 
  mutate(log_doc_meso = log(doc_meso), .before = doc_meso)
```

Plot map of coverage.

```{r meso_ann_cov}
# Plot coverage of data
# points are model fitting data
# blue rectangles are the prediction area
ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(data = df_ann_meso_pred, aes(x = lon, y = lat), fill = "steelblue3", alpha = 0.5) +
  geom_point(data = df_ann_meso_fit, aes(x = lon, y = lat, colour = log_doc_meso), size = 0.5) +
  ggplot2::scale_colour_viridis_c(option = "A") +
  coord_quickmap(expand = 0) +
  ggtitle("Meso annual")
```

Plot doc distributions, after log-transformation

```{r ann_meso_doc}
ggplot(df_ann_meso_fit) + geom_histogram(aes(x = log_doc_meso)) + ggtitle("Meso annual")
```

::: callout-note
OK-ish distribution.
:::

### Bathypelagic annual

```{r bathy_ann}
## New predictions data
# Env data in the surface + mesopelagic + bathypelagic layer, annual, to be used for new predictions. NB: this requires droping any row with missing values
df_ann_bathy_pred <- df_env %>% filter(season == 0) %>% drop_na()

## Model fitting data
# Join env data with doc data, drop missing observations, apply log transformation to doc value
df_ann_bathy_fit <- df_doc %>% 
  filter(season == 0) %>% 
  select(-contains(c("surf", "epi", "meso"))) %>% 
  left_join(df_ann_bathy_pred, by = join_by(lon, lat, season)) %>% 
  drop_na() %>% 
  mutate(log_doc_bathy = log(doc_bathy), .before = doc_bathy)
```

Plot map of coverage.

```{r bathy_ann_cov}
# Plot coverage of data
# points are model fitting data
# blue rectangles are the prediction area
ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(data = df_ann_bathy_pred, aes(x = lon, y = lat), fill = "steelblue3", alpha = 0.5) +
  geom_point(data = df_ann_bathy_fit, aes(x = lon, y = lat, colour = log_doc_bathy), size = 0.5) +
  ggplot2::scale_colour_viridis_c(option = "A") +
  coord_quickmap(expand = 0) +
  ggtitle("Bathy annual")
```

Plot doc distributions, after log-transformation

```{r ann_bathy_doc}
ggplot(df_ann_bathy_fit) + geom_histogram(aes(x = log_doc_bathy)) + ggtitle("Bathy annual")
```

::: callout-note
OK-ish distribution.
:::

## Remove extreme values

::: callout-important
In the surface layer, both in annual and seasonal, there are a few high values of log(doc). We need to get rid of these, **with a good justification**.
:::

The very high DOC values in the surface layer are found at high latitudes in the north (Kara Sea and Laptev Sea). Let’s remove them.

-   Kara Sea: 50-100° E, 70-80°N

-   Leptev Sea: 100-150° E, 70-80°N

Set DOC values to NA in these areas.

```{r remove_northern_seas}
# Annual surface data
df_ann_surf_fit <- df_ann_surf_fit %>% 
  mutate(
    log_doc_surf = ifelse(between(lon, 50, 100) & between(lat, 70, 80), NA, log_doc_surf),
    log_doc_surf = ifelse(between(lon, 100, 150) & between(lat, 70, 80), NA, log_doc_surf),
    doc_surf = ifelse(between(lon, 50, 100) & between(lat, 70, 80), NA, doc_surf),
    doc_surf = ifelse(between(lon, 100, 150) & between(lat, 70, 80), NA, doc_surf)
    ) %>% 
  drop_na()

# Seasonal surface data
df_seas_surf_fit <- df_seas_surf_fit %>% 
  mutate(
    log_doc_surf = ifelse(between(lon, 50, 100) & between(lat, 70, 80), NA, log_doc_surf),
    log_doc_surf = ifelse(between(lon, 100, 150) & between(lat, 70, 80), NA, log_doc_surf),
    doc_surf = ifelse(between(lon, 50, 100) & between(lat, 70, 80), NA, doc_surf),
    doc_surf = ifelse(between(lon, 100, 150) & between(lat, 70, 80), NA, doc_surf)
    ) %>% 
  drop_na()
```

Plot maps

```{r r_remove_nseas_maps}
ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(data = df_ann_surf_pred, aes(x = lon, y = lat), fill = "steelblue3", alpha = 0.5) +
  geom_point(data = df_ann_surf_fit, aes(x = lon, y = lat, colour = log_doc_surf), size = 0.5) +
  ggplot2::scale_colour_viridis_c(option = "A") +
  ggtitle("Surface annual") +
  coord_quickmap(expand = 0)

ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(data = df_seas_surf_pred, aes(x = lon, y = lat), fill = "steelblue3", alpha = 0.5) +
  geom_point(data = df_seas_surf_fit, aes(x = lon, y = lat, colour = log_doc_surf), size = 0.5) +
  ggplot2::scale_colour_viridis_c(option = "A") +
  coord_quickmap(expand = 0) +
  ggtitle("Surface seasonal") +
  facet_wrap(~season)
```

Let’s replot DOC distributions.

```{r r_remove_nseas_dist}
ggplot(df_ann_surf_fit) + geom_histogram(aes(x = log_doc_surf), bins = 100) + ggtitle("Surface annual")
ggplot(df_seas_surf_fit) + geom_histogram(aes(x = log_doc_surf), bins = 100) + facet_wrap(~season) + ggtitle("Surface seasonal")
```

::: callout-important
Not perfect, but not too bad for now. Will likely require more filtering.
:::

## Save everything

For each prediction task (surface annual, surface seasonal, meso annual and bathy annual) two datasets are saved:

-   one with both DOC and env data at locations where DOC is available: this will be used to fit the model.

-   one with global map of env data, to predict DOC at the global scale

```{r save}
save(df_ann_surf_fit, df_ann_surf_pred, file = "data/02.ann_surf.Rdata")
save(df_seas_surf_fit, df_seas_surf_pred, file = "data/02.seas_surf.Rdata")
save(df_ann_epi_fit, df_ann_epi_pred, file = "data/02.ann_epi.Rdata")
save(df_ann_meso_fit, df_ann_meso_pred, file = "data/02.ann_meso.Rdata")
save(df_ann_bathy_fit, df_ann_bathy_pred, file = "data/02.ann_bathy.Rdata")
```
