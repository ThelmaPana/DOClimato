---
title: "Assemble environment and DOC data."
author: "Thelma Panaïotis"
format:
  html:
    toc: true
    embed-resources: true
editor: visual
execute:
  cache: false
  warning: false
---

```{r set_up}
source("utils.R")
```

Load data

```{r load}
load("data/00.all_env.Rdata")
load("data/01.doc_data.Rdata")
```

Join env and DOC data.

```{r join}
df_all <- df_env %>% 
  #drop_na() %>% # drop missing env data
  left_join(df_doc %>% select(lon, lat, doc = doc_mean), by = join_by(lon, lat)) #%>% 
  #drop_na(doc) # drop missing doc data
```

Plot some maps.

```{r}
ggmap(df_env, var = "oxygen", type = "raster") +
  geom_point(data = df_all %>% filter(!is.na(doc)), aes(x = lon, y = lat), size = 0.5)

ggmap(df_all, var = "doc", type = "point") + 
  ggplot2::scale_colour_viridis_c(option = "A", trans = "log10", na.value = NA)
```

Explore

Response variable

```{r}
ggplot(df_all) + geom_histogram(aes(x = doc), bins = 100)
```

DOC distribution has a long-tail. Let’s try a log transformation.

```{r}
ggplot(df_all) + geom_histogram(aes(x = log(doc)), bins = 100)
```

This is better! Let’s indeed apply the log transformation.

```{r}
df_all <- df_all %>% mutate(doc_log = log(doc))
```

Let’s now investigate the big tendencies in our dataset.

```{r}
# Need to remove lon and lat and to scale because units differ between variables
df_pca <- df_all %>% select(c(lon, lat, doc, doc_log, everything()))
pca_all <- FactoMineR::PCA(df_pca, quanti.sup = 1:2, scale.unit = TRUE, graph = FALSE)
```

Plot eigenvalues.

```{r}
plot_eig(pca_all)
```

Plot variables.

```{r}
plot(pca_all, choix = "var", axes = c(1, 2), cex = 0.7)
```

```{r}
## Get coordinates of individuals
inds <- pca_all$ind$coord %>% as_tibble()
# Set nice names for columns
colnames(inds) <- str_c("dim", paste(c(1:ncol(inds))))
# And join with initial dataframe of objects
inds <- df_all %>% bind_cols(inds)

ggmap(inds, "dim1", type = "point", palette = div_pal)
ggmap(inds, "dim2", type = "point", palette = div_pal)
```

## Save everything

Annotated data

New data to predict.

```{r}
#df_all <- all
save(df_all, df_env, file = "data/02.all_data.Rdata")
```
