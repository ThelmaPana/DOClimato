---
title: "Assemble environment and DOC data."
author: "Thelma Panaïotis"
format:
  html:
    toc: true
    embed-resources: true
editor: visual
execute:
  cache: true
  warning: false
---

```{r set_up}
#| cache: false
source("utils.R")
```

We will create 4 datasets, one for each prediction task:

-   surface annual

-   surface seasonal

-   mesopelagic annual

-   bathypelagic annual

## Load data

```{r load}
load("data/00.all_env.Rdata")
load("data/01.doc_data.Rdata")

# Keep only mean for doc observations
df_doc <- df_doc %>% select(lon, lat, season, layer, doc = doc_mean)
```

## Join

```{r join}
#| fig-column: body-outset
#| out-width: 100%
# Join env and doc data
# Drop points where doc is missing
df_all <- df_env %>% 
  left_join(df_doc, by = join_by(lon, lat, season, layer)) %>% 
  drop_na(doc)

# Plot annual map by layer
ggmap(
  df_all %>% filter(season == 0), 
  var = "doc", 
  type = "point", 
  palette = ggplot2::scale_colour_viridis_c(option = "A", trans = "log10", na.value = NA)
) + 
  ggtitle("Annual by layer") + 
  facet_wrap(~layer, ncol = 2)

# Plot seasonal map in surface layer
ggmap(
  df_all %>% filter(season != 0), 
  var = "doc", 
  type = "point", 
  palette = ggplot2::scale_colour_viridis_c(option = "A", trans = "log10", na.value = NA)
) + 
  ggtitle("Seasonal in surface layer") + 
  facet_wrap(~season)

```

## Some data exploration

### Response variable

```{r hist_doc}
#| fig-column: body-outset
#| out-width: 100%
ggplot(df_all) + 
  geom_histogram(aes(x = doc), bins = 100) + 
  facet_grid(season~layer, scales = "free")
```

DOC distribution has a long-tail. Let’s try a log transformation.

```{r hist_log_doc}
#| fig-column: body-outset
#| out-width: 100%
ggplot(df_all) + 
  geom_histogram(aes(x = log(doc)), bins = 100) + 
  facet_grid(season~layer, scales = "free")
```

This is better but we still have some extreme values (e.g. `doc_log > 5`). Let’s see where these values are.

```{r map_high_doc}
#| fig-column: body-outset
#| out-width: 100%
ggplot(df_all) + 
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") + 
  geom_point(aes(x = lon, y = lat, colour = log(doc) < 5), size = 0.5) +
  ggplot2::scale_colour_viridis_d() +
  coord_quickmap(expand = 0) +
  facet_grid(season~layer)
```

The very high DOC values are found at high latitudes in the north (Kara Sea and Laptev Sea). Let’s remove them.

-   Kara Sea: 50-100° E, 70-80°N

-   Leptev Sea: 100-150° E, 70-80°N

::: {.callout-note appearance="simple"}
## TODO

Add a justification for removing these points.
:::

Set DOC values to NA in these areas.

```{r remove_northern_seas}
df_all <- df_all %>% 
  mutate(
    doc = ifelse(between(lon, 50, 100) & between(lat, 70, 80), NA, doc),
    doc = ifelse(between(lon, 100, 150) & between(lat, 70, 80), NA, doc)
    ) %>% 
  drop_na()

ggplot(df_all) +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") + 
  geom_point(aes(x = lon, y = lat, colour = log(doc) < 5), size = 0.5) +
  ggplot2::scale_colour_viridis_d() +
  coord_quickmap(expand = 0)
```

Let’s replot DOC distributions.

```{r doc_new_dist}
ggplot(df_all) + 
  geom_histogram(aes(x = log(doc)), bins = 100) + 
  facet_grid(season~layer, scales = "free")
```

```{r apply_log}
df_all <- df_all %>% mutate(doc_log = log(doc))
```

### Explanatory variables

Let’s now investigate the big tendencies in our dataset, ignoring seasons, and in the surface layer, for points where doc is available.

```{r pca}
df_pca <- df_all %>% 
  filter(season == 0) %>% 
  filter(layer == "surf") %>% 
  filter(!is.na(doc)) %>% 
  select(-c(season, layer)) %>% 
  select(c(lon, lat, doc, doc_log, everything()))
pca_all <- FactoMineR::PCA(df_pca, quanti.sup = 1:2, scale.unit = TRUE, graph = FALSE)
```

Plot eigenvalues.

```{r eig}
plot_eig(pca_all)
```

Plot variables.

```{r vars}
#| fig-column: body-outset
#| out-width: 100%
plot(pca_all, choix = "var", axes = c(1, 2), cex = 0.7)
```

```{r inds}
#| fig-column: body-outset
#| out-width: 100%
## Get coordinates of individuals
inds <- pca_all$ind$coord %>% as_tibble()
# Set nice names for columns
colnames(inds) <- str_c("dim", paste(c(1:ncol(inds))))
# And join with initial dataframe of objects
inds <- df_pca %>% bind_cols(inds)

ggmap(inds, "dim1", type = "point", palette = div_pal)
ggmap(inds, "dim2", type = "point", palette = div_pal)
```

### Distribution of DOC-annotated data VS overall env data

It is important that the distribution of env data used to predict DOC is representative of the overall environmental data that we are going to used to make predictions.

```{r comp_distrib}
#| fig-column: screen-inset
#| out-width: 100%
#| fig-width: 15
#| fig-heigh: 10
# List env variables
env_vars <- df_env %>% select(-c(lon, lat, season, layer)) %>% colnames()

# Reshape tables of doc-annotated and overall env data
dist_doc_ann <- df_all %>% 
  drop_na(doc) %>% 
  select(all_of(env_vars)) %>% 
  mutate(type = "doc-annotated") %>% 
  pivot_longer(all_of(env_vars), names_to = "variable")
dist_env <- df_env %>% 
  select(all_of(env_vars)) %>% 
  mutate(type = "overall") %>% 
  pivot_longer(all_of(env_vars), names_to = "variable")

# Assemble and plot
bind_rows(dist_doc_ann, dist_env) %>% 
  drop_na() %>% 
  ggplot() + 
  geom_density(aes(x = value, colour = type)) +
  facet_wrap(~variable, scales = "free")
```

Distributions are not too different, this is good, it means that our model won’t extrapolate outside of the range it was trained on.

## Save everything

Two datasets are saved:

-   one with both DOC and env data at locations where DOC is available: this will be used to train the model.

-   one with global map of env data, to predict DOC at the global scale

```{r save}
save(df_all, df_env, file = "data/02.all_data.Rdata")
```
