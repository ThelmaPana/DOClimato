---
title: "Assemble environment and DOC data."
author: "Thelma Panaïotis"
format:
  html:
    toc: true
    embed-resources: true
editor: visual
execute:
  cache: false
  warning: false
---

```{r set_up}
source("utils.R")
```

Load data

```{r load}
load("data/00.all_env.Rdata")
load("data/01.doc_data.Rdata")
df_env <- env
```

Join env and DOC data.

```{r join}
df_all <- df_env %>%
  select(
    lon, lat, 
    temperature,
    phosphate,
    silicate,
    alkalinity,
    dic,
    npp,
    oxygen
  ) %>% 
  drop_na() %>% # drop missing env data
  left_join(df_doc %>% select(lon, lat, doc = doc_mean), by = join_by(lon, lat)) %>% 
  drop_na(doc) # drop missing doc data
```

```{r}
ggmap(df_env, var = "oxygen", type = "raster") +
  geom_point(data = df_all, aes(x = lon, y = lat), size = 0.5)
```

```{r}
ggmap(df_all, var = "doc", type = "point") + 
  ggplot2::scale_colour_viridis_c(option = "A", trans = "log10")
```

Explore

Response variable

```{r}
ggplot(df_all) + geom_histogram(aes(x = doc), bins = 100)
```

DOC distribution has a long-tail. Let’s try a log transformation.

```{r}
ggplot(df_all) + geom_histogram(aes(x = log(doc)), bins = 100)
```

This is better but we still have some extreme values (e.g. `doc_log > 5`). Let’s see where these values are.

```{r}
ggplot(df_all) + 
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") + 
  geom_point(aes(x = lon, y = lat, colour = log(doc) < 5), size = 0.5) +
  ggplot2::scale_colour_viridis_d() +
  coord_quickmap(expand = 0)
```

The very high DOC values are found at high latitudes in the north (Kara Sea and Laptev Sea). Let’s remove them.

-   Kara Sea: 50-100° E, 70-80°N

-   Leptev Sea: 100-150° E, 70-80°N

::: {.callout-note appearance="simple"}
## TODO

Add a justification for removing these points.
:::

Set DOC values to NA in these areas.

```{r remove_northern_seas}
df_all <- df_all %>% 
  mutate(
    doc = ifelse(between(lon, 50, 100) & between(lat, 70, 80), NA, doc),
    doc = ifelse(between(lon, 100, 150) & between(lat, 70, 80), NA, doc)
    ) %>% 
  drop_na()

ggplot(df_all) +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") + 
  geom_point(aes(x = lon, y = lat, colour = log(doc) < 5), size = 0.5) +
  ggplot2::scale_colour_viridis_d() +
  coord_quickmap(expand = 0)
```

Let’s replot DOC distributions.

```{r}
ggplot(df_all) + geom_histogram(aes(x = doc), bins = 100)
ggplot(df_all) + geom_histogram(aes(x = log(doc)), bins = 100)
```

This is much better, even if we still have some high values. Let’s apply the log transformation.

```{r}
df_all <- df_all %>% mutate(doc_log = log(doc))
```

Let’s now investigate the big tendencies in our dataset.

```{r}
# Need to remove lon and lat and to scale because units differ between variables
df_pca <- df_all %>% select(c(lon, lat, doc, everything()))
pca_all <- FactoMineR::PCA(df_pca, quanti.sup = 1:2, scale.unit = TRUE, graph = FALSE)
```

Plot eigenvalues.

```{r}
plot_eig(pca_all)
```

Plot variables.

```{r}
plot(pca_all, choix = "var", axes = c(1, 2), cex = 0.7)
```

```{r}
## Get coordinates of individuals
inds <- pca_all$ind$coord %>% as_tibble()
# Set nice names for columns
colnames(inds) <- str_c("dim", paste(c(1:ncol(inds))))
# And join with initial dataframe of objects
inds <- df_all %>% bind_cols(inds)

ggmap(inds, "dim1", type = "point", palette = div_pal)
ggmap(inds, "dim2", type = "point", palette = div_pal)
```

## Save everything

Annotated data

New data to predict.

```{r}
#df_all <- all
save(df_all, df_env, file = "data/02.all_data.Rdata")
```
