---
title: "Prepare DOC data"
subtitle: "Read raw data, clean it and compute averages per pixel."
author: "Thelma Panaïotis"
format:
  html:
    toc: true
    embed-resources: true
editor: visual
execute:
  cache: true
  warning: false
---

```{r set_up}
#| output: false
#| warning: false
#| cache: false
source("utils.R")
```

## Read data

Keep data between 0 and 10 meters.

```{r read_doc}
#|warning: false
# Read a first time to get column names
columns <- read_excel(
    "data/raw/0227166/4.4/data/0-data/All_Basins_Data_Merged_Hansell_2022.xlsx", 
    n_max = 0
  ) %>% 
  colnames() %>% 
  tolower()

# Read a second time to get the data with the proper column names
df_doc_raw <- read_excel(
    "data/raw/0227166/4.4/data/0-data/All_Basins_Data_Merged_Hansell_2022.xlsx",
    skip = 2, 
    col_names = columns
  )

# Select useful columns
df_doc <- df_doc_raw %>%
  select(
    bottle, bottle_flag_w,
    lon = longitude, lat = latitude, date,
    press = `ctd pressure`,
    doc, doc_flag_w
  )
```

## Clean

Remove aberrant doc observations (flag = 9, negative values…).

::: callout-warning
## TODO

What values are ok for flags? Should we remove bottles that are `-999`?
:::

```{r clean_doc}
df_doc <- df_doc %>%
  filter(!date %in% c(-999, 0)) %>% # missing data
  filter(press != -999) %>% # missing depth
  filter(!bottle_flag_w %in% c(-999, 9)) %>% # bottle flag is ok
  filter(doc_flag_w != 9) %>% # flag is ok
  filter(doc > 0) %>% # doc is positive
  drop_na(doc) #%>% # drop missing values
 # mutate(date = ymd(date)) # format date
summary(df_doc)
```

There is also a little cleaning to do with dates: the TRACERS (2013) cruise reported dates as `201303X` , but after inspecting boat trajectory (available at <https://www.bco-dmo.org/dataset/549090>) and comparing with DOC sampling location, it appears that those dates should be `2013030X`.

Moreover, some dates are `YYYYMM00`, let’s change them to `YYYYMM01`.

Let’s fix this.

```{r clean_date}
df_doc <- df_doc %>% 
  mutate(
    date = as.character(date),  # convert date to character to split it
    # Fix for Tracers 2013
    date = ifelse( # if only 7 characters in date, one character is missing, add a 0 before the last character
      nchar(date == 7),
      paste0(str_extract(date, "^[[:digit:]]{6}"), "0", str_extract(date, "[[:digit:]]{1}$")),
      date
      ),
    # Fix for dates ending in 00
    date = str_replace(date, "00$", "01"),
    date = ymd(date) # format date
  )
```

## Assign observations to layers

DOC observations are separated in 3 layers:

-   surface (depth ⩽ `r surface_bottom`)

-   mesopelagic (depth \> `r meso_top` & depth ⩽ `r meso_bottom`)

-   surface (depth \> `r meso_bottom`)

```{r to_layers}
df_doc <- df_doc %>% 
  mutate(layer = case_when(
    press <= surface_bottom ~ "surf",
    press > meso_top & press <= meso_bottom ~ "meso",
    press > meso_bottom ~ "bathy",
  )) %>% 
  filter(!is.na(layer)) # drop observations not assigned to any layer
```

## Average by pixel across the layers

### Annual

```{r ann_avg_doc}
df_doc_ann <- df_doc %>%
  mutate(
    # floor and add 0.5 because other env data are on the centre of each pixel
    lon = roundp(lon, precision = 1, f = floor) + 0.5,
    lat = roundp(lat, precision = 1, f = floor) + 0.5
  ) %>%
  group_by(lon, lat, layer) %>%
  summarise(
    # compute mean and sd
    doc_mean = mean(doc),
    doc_sd = sd(doc),
    n_obs = n(),
    .groups = "drop"
  ) 
```

Let’s plot some maps.

```{r ann_doc_maps}
#| fig-column: body-outset
#| out-width: 100%
# Number of observations
ggmap(df_doc_ann, "n_obs", type = "point", palette = ggplot2::scale_colour_viridis_c(option = "cividis", trans = "log10", direction = -1)) +
  ggtitle("Number of observations") +
  facet_wrap(~layer, ncol = 2)

# DOC mean
ggmap(df_doc_ann, "doc_mean", type = "point", palette = ggplot2::scale_colour_viridis_c(option = "A", trans = "log10")) + 
  ggtitle("DOC mean") +
  facet_wrap(~layer, ncol = 2)

# DOC sd
ggmap(df_doc_ann, "doc_sd", type = "point", palette = ggplot2::scale_colour_viridis_c()) + 
  ggtitle("DOC sd") +
  facet_wrap(~layer, ncol = 2)
```

Store layered doc in multiple columns, in a similar fashion as for env data, and add season.

```{r ann_doc_cal}
df_doc_ann <- df_doc_ann %>% 
  select(lon, lat, layer, doc = doc_mean) %>% 
  mutate(layer = paste0("doc.", layer)) %>% 
  pivot_wider(names_from = layer, values_from = doc) %>% 
  mutate(season = 0, .after = lat)
```

### Seasonal (surface layer only)

Seasons are defined as:

-   season 1 = DJF

-   season2 = MAM

-   season 3 = JJA

-   season 4 = SON

```{r season}
df_doc_s <- df_doc %>% 
  filter(layer == "surf") %>% 
  mutate(season = quarter(date, fiscal_start = 12)) %>% 
  # generate seasonal average by pixel
  mutate(
    # floor and add 0.5 because other env data are on the centre of each pixel
    lon = roundp(lon, precision = 1, f = floor) + 0.5,
    lat = roundp(lat, precision = 1, f = floor) + 0.5
  ) %>%
  group_by(lon, lat, season) %>%
  summarise(
    # compute mean and sd
    doc.surf = mean(doc),
    .groups = "drop"
  ) 

# Counts per season
ggplot(df_doc_s) + geom_bar(aes(x = season)) + scale_x_continuous(n.breaks = 3, expand = c(0,0))
```

And plot seasonal maps.

```{r s_doc_maps}
#| fig-column: screen-inset
#| out-width: 100%
#| fig-width: 10
#| fig-height: 5
ggmap(df_doc_s, "doc.surf", type = "point", palette = ggplot2::scale_colour_viridis_c(option = "A", trans = "log10")) + 
  facet_wrap(~season) +
  ggtitle("DOC mean by season")
```

Few observations during winter at high latitudes. Will see what we can do.

## Save DOC data

```{r save}
# Join annual and seasonnal observations together
df_doc <- bind_rows(df_doc_ann, df_doc_s)

### Some sanity checks
## seasonal data is only in surf #ok
#df_doc %>% filter(season != 0) %>% select(-contains(c("meso", "bathy"))) %>% summary()
#df_doc %>% filter(season != 0) %>% select(contains(c("meso", "bathy"))) %>% summary()
#
## annual data is in all 3 layers
#df_doc %>% filter(season == 0) %>% summary()
#
## All ok!


# Save
save(df_doc, file = "data/01.doc_data.Rdata")
```
